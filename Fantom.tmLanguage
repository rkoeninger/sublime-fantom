<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>fan</string>
	</array>
	<key>name</key>
	<string>Fantom</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#main</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#line-comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#fandoc-comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#multiline-comment</string>
				</dict>
			</array>
		</dict>
		<key>double-quoted-string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(")</string>
					<key>end</key>
					<string>(")</string>
					<key>name</key>
					<string>string.quoted.double.fan</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escaped-unicode</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped-char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#interpolation</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>escaped-char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\\[bfnrt"'`$\\])</string>
					<key>name</key>
					<string>constant.character.escape.char.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\\.)</string>
					<key>name</key>
					<string>invalid.illegal.escape.char.fan</string>
				</dict>
			</array>
		</dict>
		<key>escaped-unicode</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\\u[0-9A-Fa-f]{4})</string>
					<key>name</key>
					<string>constant.character.escape.unicode.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\\u[0-9A-Fa-f]{0,3})</string>
					<key>name</key>
					<string>invalid.illegal.escape.unicode.fan</string>
				</dict>
			</array>
		</dict>
		<key>fandoc-comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(^\s*\*\*.*$)</string>
					<key>name</key>
					<string>comment.line.fandoc.fan</string>
				</dict>
			</array>
		</dict>
		<key>interpolation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\$\{.+?\})</string>
					<key>name</key>
					<string>variable.other.interpolated-expr.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\$([A-Za-z_][A-Za-z0-9_]*(\.[A-Za-z_][A-Za-z0-9_]*)*))</string>
					<key>name</key>
					<string>variable.other.interpolated-dotcall.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\$\{\w*)</string>
					<key>name</key>
					<string>invalid.illegal.interpolation.fan</string>
				</dict>
			</array>
		</dict>
		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\b(true|false|null)\b)</string>
					<key>name</key>
					<string>constant.language.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\b(abstract|const|enum|facet|final|internal|native|once|override|private|protected|public|readonly|static|virtual|volatile)\b)</string>
					<key>name</key>
					<string>storage.modifier.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\b(return|break|continue)\b)</string>
					<key>name</key>
					<string>keyword.control.block.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\b(try|catch|finally|throw|assert)\b)</string>
					<key>name</key>
					<string>keyword.control.exceptions.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\b(for|while|do|foreach)\b)</string>
					<key>name</key>
					<string>keyword.control.loop.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\b(if|else|switch|case|default)\b)</string>
					<key>name</key>
					<string>keyword.control.flow.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\b(new|void)\b)</string>
					<key>name</key>
					<string>keyword.other.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\b(using)\b)</string>
					<key>name</key>
					<string>storage.modifier.global.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\b(this|super|it)\b)</string>
					<key>name</key>
					<string>variable.language.self.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\b(Void|Bool|Int|Float|Decimal|Duration|Str|Uri|Type|Slot|Range|List|Map|This)\b)</string>
					<key>name</key>
					<string>support.type.sys.fan</string>
				</dict>
			</array>
		</dict>
		<key>line-comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>((//).*$)</string>
					<key>name</key>
					<string>comment.line.double-slash.fan</string>
				</dict>
			</array>
		</dict>
		<key>main</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#uris</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numbers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#typedef</string>
				</dict>
			</array>
		</dict>
		<key>multiline-comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(/\*)</string>
					<key>end</key>
					<string>(\*/)</string>
					<key>name</key>
					<string>comment.block</string>
				</dict>
			</array>
		</dict>
		<key>numbers</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\b0x[0-9A-Fa-f][_0-9A-Fa-f]*)</string>
					<key>name</key>
					<string>constant.numeric.hex.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(0x)</string>
					<key>name</key>
					<string>invalid.illegal.hex.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\\u[0-9A-Fa-f]{4})</string>
					<key>name</key>
					<string>constant.numeric.escape.unicode.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\\(u[0-9A-Fa-f]{0,3})?)</string>
					<key>name</key>
					<string>invalid.illegal.escape.unicode.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\'\\[bfnrt"'$\\]\')</string>
					<key>name</key>
					<string>constant.numeric.escape.char.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\'[^\\]\')</string>
					<key>name</key>
					<string>constant.numeric.char.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>((\B\.[0-9][0-9_]*|\b[0-9][0-9_]*(\.[0-9][0-9_]*)?)([eE][-+]?[0-9][0-9_]*)?(ns|ms|sec|min|hr|day))</string>
					<key>name</key>
					<string>constant.other.duration.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>((\B\.[0-9][0-9_]*|\b[0-9][0-9_]*(\.[0-9][0-9_]*)?)([eE][-+]?[0-9][0-9_]*)?[fdFD]?)</string>
					<key>name</key>
					<string>constant.numeric.number.fan</string>
				</dict>
			</array>
		</dict>
		<key>operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(===?|!==?)</string>
					<key>name</key>
					<string>keyword.operator.equality.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(&lt;(=|=&gt;)?|&gt;=?)</string>
					<key>name</key>
					<string>keyword.operator.relational.symbol.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(:?=)</string>
					<key>name</key>
					<string>keyword.operator.assign.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([+*/%-]=?)</string>
					<key>name</key>
					<string>keyword.operator.math.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(!|&amp;&amp;|(\?\:)|(\|\|))</string>
					<key>name</key>
					<string>keyword.operator.logical.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\b(is|isnot|as)\b)</string>
					<key>name</key>
					<string>keyword.operator.relational.named.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\-&gt;|\?\-&gt;|\?\.)</string>
					<key>name</key>
					<string>keyword.operator.call.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\+\+|\-\-)</string>
					<key>name</key>
					<string>keyword.operator.inc-dec.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\.\.&lt;?)</string>
					<key>name</key>
					<string>keyword.operator.range.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\?|:)</string>
					<key>name</key>
					<string>keyword.operator.tertiary.fan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(;)</string>
					<key>name</key>
					<string>punctuation.terminator.fan</string>
				</dict>
			</array>
		</dict>
		<key>string-dsl</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>((Str)&lt;\|)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.sys.fan</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\|&gt;)</string>
					<key>name</key>
					<string>string.quoted.other.fan</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#triple-quoted-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#double-quoted-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-dsl</string>
				</dict>
			</array>
		</dict>
		<key>triple-quoted-string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"""</string>
					<key>end</key>
					<string>"""</string>
					<key>name</key>
					<string>string.quoted.triple.fan</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\"</string>
							<key>name</key>
							<string>invalid.illegal.escape.char.fan</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped-unicode</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped-char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#interpolation</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>typedef</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(class|mixin)(?=\s+([A-Za-z_][A-Za-z0-9_]*))</string>
					<key>name</key>
					<string>storage.modifier.fan</string>
				</dict>
			</array>
		</dict>
		<key>uris</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(`)</string>
					<key>end</key>
					<string>(`)</string>
					<key>name</key>
					<string>string.quoted.other.uri.fan</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escaped-unicode</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped-char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#interpolation</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.fan</string>
	<key>uuid</key>
	<string>de0743d9-c48e-44a0-a28b-6003d88f09d0</string>
</dict>
</plist>
